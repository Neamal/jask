// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Interview sessions
  interviewSessions InterviewSession[]
  codeSubmissions   CodeSubmission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model InterviewSession {
  id        String                @id @default(cuid())
  userId    String
  roomName  String                @unique
  status    InterviewSessionStatus @default(WAITING)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Related data
  codeSubmissions CodeSubmission[]
  gestureEvents   GestureEvent[]
  analysisResults AnalysisResult[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  endedAt   DateTime?

  @@index([userId])
  @@index([status])
}

model CodeSubmission {
  id        String @id @default(cuid())
  sessionId String
  userId    String
  code      String @db.Text
  language  String
  lineCount Int?

  session InterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Analysis results for this submission
  analysisResults AnalysisResult[]

  createdAt DateTime @default(now())

  @@index([sessionId])
  @@index([userId])
  @@index([createdAt])
}

model GestureEvent {
  id         String      @id @default(cuid())
  sessionId  String
  type       GestureType
  confidence Float // 0.0 to 1.0
  metadata   Json? // Additional data like coordinates, duration, etc.

  session InterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([sessionId])
  @@index([type])
  @@index([createdAt])
}

model AnalysisResult {
  id                 String @id @default(cuid())
  sessionId          String
  codeSubmissionId   String?
  analysis           String @db.Text
  suggestions        String[] // Array of suggestion strings
  confidence         Float // 0.0 to 1.0
  processingTimeMs   Int
  modelUsed          String // e.g., "claude-3-sonnet-20240229"

  session        InterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  codeSubmission CodeSubmission?  @relation(fields: [codeSubmissionId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@index([sessionId])
  @@index([codeSubmissionId])
  @@index([createdAt])
}

enum InterviewSessionStatus {
  WAITING
  ACTIVE
  ENDED
}

enum GestureType {
  PAUSE
  CONFUSION_GESTURE
  RAISED_HAND
  THUMBS_UP
}
